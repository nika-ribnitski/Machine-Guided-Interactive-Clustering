{"version":3,"sources":["images/clusterImg1.png","images/clusterImg2.png","images/clusterImg3.png","images/clusterImg4.png","images/clusterImg5.png","images/clusterImg6.png","images/clusterImg7.png","model/finalized_model.sav","Python.js","components/pages/landingPage/inputForm/textInput.js","components/pages/landingPage/inputForm/inputForm.js","components/notification.js","components/pages/landingPage/landing.js","components/chartsDisplay/singleChartDisplay.js","components/chartsDisplay/chartsDisplay.js","components/chartsDisplay/modalChartDisplay.js","components/pages/questions/tableDisplay.js","components/pages/questions/buttonsComp.js","components/statsDisplays/individualStatNumber.js","components/statsDisplays/squareStatDisplay.js","components/pages/questions/questions.js","components/statsDisplays/recStatDisplay.js","components/pages/summary/summary.js","components/router.js","App.js","reportWebVitals.js","index.js","images sync /^/clusterImg.*/.png$"],"names":["FormInput","filename","questionsPerIteration","numberOfClusters","maxConstraintPercent","ml","cl","unknown","Stats","clSize","mlSize","unknownSize","maxConstraint","totalSamples","silAvg","silMax","silMin","samples","this","clConstraintCount","mlConstraintCount","unknownConstraintCount","possibleConstraints","totalConstraints","constraintsLeft","constrainedPercent","Math","ceil","round","PythonOutput","question_set","convertIncomingSet","set","new_set","substring","length","split","forEach","item","index","arr","parseInt","trim","MyTextInput","props","useField","field","meta","label","htmlFor","name","className","type","touched","error","MyTextInputPercent","FileForm","el","React","createRef","file","path","fileName","AppContext","Consumer","context","uploadFile","baseUrl","formData","FormData","append","window","location","origin","console","log","axios","post","then","res","data","catch","err","response","Card","Body","Title","ref","accept","onChange","e","RegExp","test","current","value","toLowerCase","target","files","reader","FileReader","addEventListener","event","saveData","Papa","parse","result","readAsText","alert","initialValues","validationSchema","Yup","typeError","required","onSubmit","values","a","verifiedInput","saveForm","trackPython","history","push","Row","Col","placeholder","Button","Component","FileUpload","withRouter","Notification","useState","show","showA","setShowA","Toast","onClose","Header","text","Landing","errorMessage","ChartSlot","Img","src","imgSrc","alt","ImgOverlay","iteration","ChartsDisplay","iterationCount","imageArr","smallerArray","require","default","getImageArr","realIndex","map","key","link","ModalChartDisplay","setShow","handleClose","handleShow","variant","onClick","Modal","onHide","dialogClassName","backdrop","keyboard","closeButton","Footer","TableDisplay","increaseIndex","setState","previousState","questionIndex","sample1","getSample","dataArr","sample2","sample_num","question","featuresArr","state","instance","Table","striped","bordered","size","undefined","getInstance","ButtonsComponent","increaseQuestion","questionNum","handleMustLink","mlArr","handleClick","handleCantLink","clArr","handleUnkown","totalQuestion","python","totalPercent","pythonPass","Boolean","disabled","StatNumber","number","SquareStatDisplay","stats","xs","ProgressBar","animated","now","Questions","promiseInProgress","usePromiseTracker","handleImagePassing","count","promiseTracker","to","output","formInput","RecStatDisplay","zipImagesFolderAndDownload","zip","JSZip","Promise","all","url","resolve","reject","JSZipUtils","generateAsync","content","saveAs","href","download","Summary","Router","exact","render","inputVerified","pythonRestart","createContext","App","trackPromise","runPython","outputsFromPython","totalML","concat","totalCL","unknownC","formState","outputArr","handleMissingDataErrors","errorFalse","_","message","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","Error","code","keys","Object","module","exports"],"mappings":"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","file":"static/js/main.cec781b4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/clusterImg1.28908edd.png\";","export default __webpack_public_path__ + \"static/media/clusterImg2.efb5d52c.png\";","export default __webpack_public_path__ + \"static/media/clusterImg3.ab3363fb.png\";","export default __webpack_public_path__ + \"static/media/clusterImg4.ab3363fb.png\";","export default __webpack_public_path__ + \"static/media/clusterImg5.ab3363fb.png\";","export default __webpack_public_path__ + \"static/media/clusterImg6.ab3363fb.png\";","export default __webpack_public_path__ + \"static/media/clusterImg7.efb5d52c.png\";","export default __webpack_public_path__ + \"static/media/finalized_model.84d2dcac.sav\";","export class FormInput {\r\n    filename = \"\"\r\n    questionsPerIteration = \"\"\r\n    numberOfClusters = \"\"\r\n    maxConstraintPercent = \"\"\r\n    ml = []\r\n    cl = []\r\n    unknown = []\r\n}\r\n\r\nexport class Stats {\r\n    constructor(clSize, mlSize, unknownSize, maxConstraint, totalSamples, silAvg, silMax, silMin) {\r\n        const samples = totalSamples - 1 //Done cause the first row is a feature row. \r\n        //Constraint Count\r\n        this.clConstraintCount = clSize\r\n        this.mlConstraintCount = mlSize\r\n        this.unknownConstraintCount = unknownSize\r\n        //Constraint Percent\r\n        this.maxConstraint = maxConstraint\r\n        this.possibleConstraints = samples * samples\r\n        this.totalConstraints = (clSize + mlSize + unknownSize)\r\n        this.constraintsLeft = (this.possibleConstraints * (maxConstraint / 100)) - this.totalConstraints\r\n        this.constrainedPercent = Math.ceil((this.totalConstraints / (this.possibleConstraints * (maxConstraint / 100))) * 100)\r\n        //Sihloutte Values \r\n        this.silAvg = Math.round(silAvg * 1000)/1000\r\n        this.silMax = Math.round(silMax * 1000)/1000\r\n        this.silMin = Math.round(silMin * 1000)/1000\r\n    }\r\n}\r\n\r\nexport class PythonOutput {\r\n    constructor(question_set) {\r\n        this.question_set = this.convertIncomingSet(question_set)\r\n    }\r\n\r\n    convertIncomingSet(set) {\r\n        var new_set = set.substring(1, set.length - 1).split(\",\")\r\n        new_set.forEach((item, index, arr) => {\r\n            arr[index] = parseInt(item.trim())\r\n        })\r\n        return new_set\r\n    }\r\n}","import React from 'react';\r\nimport { useField } from \"formik\";\r\n\r\n/**\r\n * Text input for basic inputs.\r\n * @param props \r\n * name: used as for the use of the label for the input\r\n * label: the text used within the label. \r\n */\r\nexport const MyTextInput = (props) => {\r\n    const [field, meta] = useField(props);\r\n    return (\r\n        <div>\r\n            {props.label !== \"\" ? <label htmlFor={props.name} className=\"pt-2\">{props.label}</label> : null}\r\n            <input className=\"form-control\" type=\"string\" {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <div className=\"error\">{meta.error}</div>\r\n            ) : null}\r\n        </div>\r\n    );\r\n};\r\n\r\n/**\r\n * Very similar to the above text input.\r\n * This component has a side % symbol on the right. \r\n * Used for float values. \r\n * @param props \r\n */\r\nexport const MyTextInputPercent = (props) => {\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <div>\r\n      {props.label !== \"\" ? <label htmlFor={props.name} className=\"pt-2\">{props.label}</label> : null}\r\n      <div className=\"input-group\">\r\n        <input className=\"form-control\" type=\"string\" {...field} {...props} />\r\n        <div className=\"input-group-append rounded-right\">\r\n          <span className=\"input-group-text smaller\">%</span>\r\n        </div>\r\n      </div>\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Papa from 'papaparse'\r\nimport { AppContext } from \"../../../../App\"\r\nimport { FormInput } from '../../../../Python'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport { Card, Button } from 'react-bootstrap';\r\n\r\nimport { MyTextInput, MyTextInputPercent } from \"./textInput\"\r\n\r\nclass FileForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.el = React.createRef()\r\n        this.file = null\r\n        this.path = null\r\n        this.name = null\r\n        this.fileName = \"Choose Dataset\"\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <AppContext.Consumer>\r\n                    {context => {\r\n                        let handleChange = (e) => {\r\n                            var regex = new RegExp(\"(.*?)(csv)$\");\r\n                            if (!(regex.test(this.el.current.value.toLowerCase()))) {\r\n                                this.el.current.value = \"\"\r\n                                alert('Please select correct file format');\r\n                            } else {\r\n                                this.fileName = this.el.current.value.split(\"\\\\\")[2]\r\n                                this.file = e.target.files[0]; // accesing file\r\n                                const reader = new FileReader();\r\n                                reader.addEventListener('load', event => {\r\n                                    context.saveData(Papa.parse(event.target.result.trim()))\r\n                                });\r\n                                reader.readAsText(this.file);\r\n                            }\r\n                        }\r\n                        let uploadFile = () => {\r\n                            const formData = new FormData();\r\n                            formData.append('file', this.file); // appending file\r\n                            var baseUrl;\r\n                            if (window.location.origin === \"http://localhost:3000\"){\r\n                                baseUrl = \"http://localhost:4500\"\r\n                            } else{\r\n                                baseUrl = window.location.origin\r\n                            }\r\n                            console.log(baseUrl)\r\n                            axios.post(baseUrl + '/upload', formData, {\r\n                            }).then(res => {\r\n                                this.name = res.data.name\r\n                                this.path = baseUrl + res.data.path\r\n                            }).catch(err => console.log(err.response))\r\n                        }\r\n                        return (\r\n                            <div className=\"outerBorders w-75\">\r\n                                <Card className=\"border border-dark\">\r\n                                    <Card.Body>\r\n                                        <Card.Title className=\"text-center\">Input Your Information</Card.Title>\r\n                                        <label className=\"pt-2\">Upload a Numerical Dataset</label>\r\n                                        <div className=\"input-group\">\r\n                                            <div className=\"custom-file\">\r\n                                                <input type=\"file\" className=\"custom-file-input\" ref={this.el} accept=\".csv\" onChange={handleChange} />\r\n                                                <label className=\"custom-file-label\">{this.fileName}</label>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <Formik\r\n                                            initialValues={new FormInput()}\r\n                                            validationSchema={Yup.object({\r\n                                                questionsPerIteration: Yup.number().typeError(\"Must be a number.\").required(\"Need this value to determine questions I can ask you.\"),\r\n                                                numberOfClusters: Yup.number().typeError(\"Must be a number.\").required(\"Need this value to know the cluster amount based on your dataset.\"),\r\n                                                maxConstraintPercent: Yup.number().typeError(\"Must be a number.\").required(\"Need this so I can help you stop when you are ready.\")\r\n                                            })}\r\n                                            onSubmit={async values => {\r\n                                                values.filename = this.fileName\r\n                                                context.verifiedInput()\r\n                                                if (values.questionsPerIteration % 2 !== 0) {\r\n                                                    values.questionsPerIteration = parseInt(values.questionsPerIteration) - 1\r\n                                                }\r\n                                                context.saveForm(values)\r\n                                                context.trackPython([], [], [])\r\n                                                uploadFile()\r\n                                                const { history } = this.props\r\n                                                history.push(\"/questions\")\r\n                                            }}\r\n                                        >\r\n                                            <Form>\r\n                                                <Row>\r\n                                                    <Col>\r\n                                                        <MyTextInput\r\n                                                            label=\"Questions per Iteration\"\r\n                                                            name=\"questionsPerIteration\"\r\n                                                            placeholder=\"\">\r\n                                                        </MyTextInput>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                                <Row>\r\n                                                    <Col>\r\n                                                        <MyTextInput\r\n                                                            label=\"Number of Clusters\"\r\n                                                            name=\"numberOfClusters\"\r\n                                                            placeholder=\"\">\r\n                                                        </MyTextInput>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                                <Row>\r\n                                                    <Col>\r\n                                                        <MyTextInputPercent\r\n                                                            label=\"Max Constraint Percentage\"\r\n                                                            name=\"maxConstraintPercent\"\r\n                                                            placeholder=\"\">\r\n                                                        </MyTextInputPercent>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                                <Row className=\"align-middle align-items-center text-center\">\r\n                                                    <Button type=\"submit\" className=\"mt-3\">Start</Button>\r\n                                                </Row>\r\n                                            </Form>\r\n                                        </Formik>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </AppContext.Consumer>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst FileUpload = withRouter(FileForm)\r\n\r\nexport default FileUpload;","import React, { useState } from 'react';\r\nimport { Toast } from 'react-bootstrap';\r\n\r\nfunction Notification(props) {\r\n    const [showA, setShowA] = useState(props.show);\r\n\r\n    const toggleShowA = () => setShowA(!showA);\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"notification bg-danger\">\r\n                <Toast show={showA} onClose={toggleShowA}>\r\n                    <Toast.Header className=\"bg-danger\">\r\n                        <strong className=\"mr-auto text-white\">Interactive Constrained Clustering</strong>\r\n                    </Toast.Header>\r\n                    <Toast.Body>{props.text}</Toast.Body>\r\n                </Toast>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Notification","import FileUpload from './inputForm/inputForm';\r\nimport React, { Component } from 'react';\r\nimport { Col } from 'react-bootstrap';\r\nimport Notification from '../../notification'\r\nimport { AppContext } from \"../../../App\"\r\n\r\nclass Landing extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <AppContext.Consumer>\r\n                    {context => (\r\n                        <>\r\n                            <Notification text={context.errorMessage} show={context.error} />\r\n                            <div className=\"rowNoMargin imgSection\">\r\n                                <Col className=\"col-sm-6 align-middle align-items-center text-center leftHalf\">\r\n                                    <h1 className=\"text-white titleFontSize\">Interactive Constrained Clustering</h1>\r\n                                </Col>\r\n                                <Col className=\"col-sm-6 align-middle align-items-center\">\r\n                                    <FileUpload></FileUpload>\r\n                                </Col>\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                </AppContext.Consumer>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Landing;","import React from 'react';\r\nimport {Card} from 'react-bootstrap'\r\n\r\nexport const ChartSlot = (props) => {\r\n    return (\r\n        <div>\r\n            <Card className=\"bg-dark\">\r\n                <Card.Img src={props.imgSrc} alt=\"Card image\"/>\r\n                <Card.ImgOverlay className=\"lessImagePadding text-center\">\r\n                    <Card.Title>Iteration {props.iteration}</Card.Title>\r\n                </Card.ImgOverlay>\r\n            </Card>\r\n        </div>\r\n    );\r\n};","import React, { Component } from 'react';\r\nimport { Col } from 'react-bootstrap'\r\nimport { ChartSlot } from \"./singleChartDisplay\"\r\n\r\nclass ChartsDisplay extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.iterationCount = props.iterationCount\r\n    }\r\n\r\n    getImageArr() {\r\n        var imageArr = [];\r\n        var smallerArray = []\r\n        for (let index = 0; index < this.iterationCount; index++) {\r\n            smallerArray.push(require(\"../../images/clusterImg\" + (index + 1) + \".png\").default)\r\n            if (smallerArray.length === 3) {\r\n                imageArr.push(smallerArray)\r\n                smallerArray = []\r\n            }\r\n        }\r\n        if (smallerArray.length) {\r\n            imageArr.push(smallerArray)\r\n        }\r\n        //console.log(\"ImageArray\", imageArr)\r\n        return imageArr\r\n    }\r\n\r\n    render() {\r\n        const imageArr = this.getImageArr()\r\n        let realIndex = 0\r\n        return (\r\n            <div>\r\n                {imageArr.map((key, index) => {\r\n                    return (\r\n                        <div className=\"rowNoMargin\" key={index}>\r\n                            {key.map((link) => {\r\n                                realIndex = realIndex + 1\r\n                                return (\r\n                                    <Col key={realIndex}>\r\n                                        <div className=\"outerBorders\">\r\n                                            <ChartSlot\r\n                                                iteration={realIndex}\r\n                                                imgSrc={link}>\r\n                                            </ChartSlot>\r\n                                        </div>\r\n                                    </Col>\r\n                                )\r\n                            })\r\n                            }\r\n                            {realIndex % 3 === 1 ? <Col></Col> : null}\r\n                            {realIndex % 3 === 1 ? <Col></Col> : null}\r\n                            {realIndex % 3 === 2 ? <Col></Col> : null}\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChartsDisplay;","import React, { useState } from \"react\";\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport ChartsDisplay from \"./chartsDisplay\"\r\nimport { AppContext } from \"../../App\"\r\n\r\nexport function ModalChartDisplay() {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  return (\r\n      <AppContext.Consumer>\r\n        {\r\n          context => (\r\n            <>\r\n              <Button variant=\"primary\" className=\"btn-block\" onClick={handleShow}>\r\n                View Images\r\n              </Button>\r\n\r\n              <Modal\r\n                show={show}\r\n                onHide={handleClose}\r\n                dialogClassName=\"modal-90w\"\r\n                backdrop=\"static\"\r\n                keyboard={false}\r\n              >\r\n                <Modal.Header closeButton>\r\n                  <Modal.Title>Iteration Images</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                  <ChartsDisplay iterationCount={context.iterationCount}></ChartsDisplay>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                  <Button variant=\"secondary\" onClick={handleClose}>\r\n                    Close\r\n                  </Button>\r\n                </Modal.Footer>\r\n              </Modal>\r\n            </>\r\n          )\r\n        }\r\n      </AppContext.Consumer>\r\n  );\r\n}","import React, { Component } from 'react';\r\nimport { Table } from 'react-bootstrap'\r\n\r\nclass TableDisplay extends Component {\r\n\r\n\r\n    static instance = TableDisplay\r\n    static getInstance = () => TableDisplay.instance;\r\n    constructor(props) {\r\n        super(props)\r\n        this.dataArr = props.dataArr.data\r\n        this.set = props.set\r\n        this.featuresArr = props.dataArr.data[0]\r\n        this.state = {\r\n            questionIndex: 0,\r\n            sample1: this.getSample(this.dataArr, this.set, 0, 0),\r\n            sample2: this.getSample(this.dataArr, this.set, 1, 0),\r\n        }\r\n\r\n        TableDisplay.instance = this;\r\n    }\r\n\r\n\r\n    increaseIndex = () => {\r\n        this.setState(previousState => {\r\n            return {\r\n                questionIndex: previousState.questionIndex + 2,\r\n                sample1: this.getSample(this.dataArr, this.set, 0, previousState.questionIndex + 2),\r\n                sample2: this.getSample(this.dataArr, this.set, 1, previousState.questionIndex + 2)\r\n            }\r\n        })\r\n    }\r\n\r\n    getSample = (arr, set, sample_num, question) => {\r\n        try {\r\n            return arr[set[question + sample_num]]\r\n        } catch (err) {\r\n            return this.featuresArr\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Table striped bordered size=\"sm\" className=\"marginBottom0\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th className=\"text-center\">Features</th>\r\n                            <th className=\"text-center\">Sample {this.set === undefined ? \"\" : this.set[this.state.questionIndex]}</th>\r\n                            <th className=\"text-center\">Sample {this.set === undefined ? \"\" : this.set[this.state.questionIndex + 1]}</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.featuresArr.map((key, index) => {\r\n                            return (\r\n                                <tr key={index}>\r\n                                    <td>{key}</td>\r\n                                    <td>{this.state.sample1[index]}</td>\r\n                                    <td>{this.state.sample2[index]}</td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                </Table>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default TableDisplay;","import React, { Component } from 'react';\r\nimport { Col, Row, Button } from 'react-bootstrap'\r\nimport TableDisplay from \"./tableDisplay\"\r\n\r\nclass ButtonsComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.set = props.set\r\n        this.trackPython = props.python\r\n        this.totalQuestion = props.totalQuestion\r\n        this.totalPercent = props.totalPercent  //To track when to disable buttons. \r\n        this.pythonPass = props.pythonPass //To track when Python fails. To also disable buttons. \r\n        this.mlArr = []\r\n        this.clArr = []\r\n        this.unknown = []\r\n        this.index = 0\r\n        this.state = {\r\n            questionNum: 1\r\n        }\r\n    }\r\n\r\n    increaseQuestion = () => {\r\n        this.setState(previousState => {\r\n            return {\r\n                questionNum: previousState.questionNum + 1,\r\n            }\r\n        })\r\n        this.index += 2\r\n    }\r\n\r\n    handleMustLink = () => {\r\n        this.mlArr.push(this.set[this.index])\r\n        this.mlArr.push(this.set[this.index+1])\r\n        this.handleClick()\r\n    }\r\n\r\n    handleCantLink = () => {\r\n        this.clArr.push(this.set[this.index])\r\n        this.clArr.push(this.set[this.index+1])\r\n        this.handleClick()\r\n    }\r\n\r\n    handleUnkown = () => {\r\n        this.unknown.push(this.set[this.index])\r\n        this.unknown.push(this.set[this.index+1])\r\n        this.handleClick()\r\n    }\r\n\r\n    \r\n\r\n    handleClick = () => {\r\n        this.increaseQuestion()\r\n        if (this.state.questionNum === parseInt(this.totalQuestion)){\r\n            this.trackPython(this.mlArr, this.clArr, this.unknown)\r\n        }\r\n        TableDisplay.getInstance().increaseIndex()\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Col>\r\n                    <Row>\r\n                        <Col className=\"text-center\">\r\n                            Questions {this.state.questionNum}/{this.totalQuestion}\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"align-middle align-items-center text-center mt-3\">\r\n                        <Col>\r\n                            {parseInt(this.totalPercent) >= 100 || Boolean(this.pythonPass) === false ? \r\n                            <Button onClick={this.handleMustLink} disabled>Must-Link</Button> : \r\n                            <Button onClick={this.handleMustLink}>Must-Link</Button>}\r\n                        </Col>\r\n                        <Col>\r\n                            {parseInt(this.totalPercent) >= 100 || Boolean(this.pythonPass) === false ? \r\n                            <Button onClick={this.handleUnkown} disabled>Unknown</Button> : \r\n                            <Button onClick={this.handleUnkown}>Unknown</Button>}\r\n                        </Col>\r\n                        <Col>\r\n                            {parseInt(this.totalPercent) >= 100 || Boolean(this.pythonPass) === false ? \r\n                            <Button onClick={this.handleCantLink} disabled>Cannot-Link</Button> : \r\n                            <Button onClick={this.handleCantLink}>Cannot-Link</Button>}\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default ButtonsComponent;","import React from 'react';\r\n\r\nexport const StatNumber = (props) => {\r\n    return (\r\n        <div>\r\n            <h3>{props.number}</h3>\r\n            <span className=\"individTitleForStats\">{props.name}</span>\r\n        </div>\r\n    );\r\n};\r\n","import React, { Component } from 'react';\r\nimport { Col, Row, ProgressBar } from 'react-bootstrap';\r\nimport { StatNumber } from \"./individualStatNumber\"\r\n\r\nclass SquareStatDisplay extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            stats: props.stats\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"containerNoPadding\">\r\n                    <Row>\r\n                        <Col className=\"text-center\">\r\n                            Constraints\r\n                            <Row className=\"lineForStats\">\r\n                                <Col xs={4}>\r\n                                    <StatNumber number={this.state.stats.mlConstraintCount} name=\"Must Link Constraints\"></StatNumber>\r\n                                </Col>\r\n                                <Col xs={4}>\r\n                                    <StatNumber number={this.state.stats.unknownConstraintCount} name=\"Unknown Constraints\"></StatNumber>\r\n                                </Col>\r\n                                <Col xs={4}>\r\n                                    <StatNumber number={this.state.stats.clConstraintCount} name=\"Can't Link Constraints\"></StatNumber>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        <Col className=\"text-center\">\r\n                            Silhouette\r\n                            <Row>\r\n                                <Col xs={4}>\r\n                                    <StatNumber number={this.state.stats.silMin} name=\"Silhouette Minimum\"></StatNumber>\r\n                                </Col>\r\n                                <Col xs={4}>\r\n                                    <StatNumber number={this.state.stats.silAvg} name=\"Silhouette Average\"></StatNumber>\r\n                                </Col>\r\n                                <Col xs={4}>\r\n                                    <StatNumber number={this.state.stats.silMax} name=\"Silhouette Maximum\"></StatNumber>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"text-center mt-3\">\r\n                            Constrained Percentage\r\n                            <Row>\r\n                                <Col className=\"my-3\">\r\n                                    <ProgressBar striped animated variant=\"primary\" label={`${this.state.stats.constrainedPercent}%`} now={this.state.stats.constrainedPercent} />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"\">\r\n                                <Col xs={4}>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <span>{this.state.stats.maxConstraint}%</span>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <span className=\"individTitleForStats\">Max Constraint Percent</span>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                                <Col xs={4}>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <span>{this.state.stats.totalConstraints}/{this.state.stats.possibleConstraints}</span>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <span className=\"individTitleForStats\">Total Constraints Possible</span>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                                <Col xs={4}>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <span>{this.state.stats.constraintsLeft}</span>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <span className=\"individTitleForStats\">Constraints Left</span>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default SquareStatDisplay;","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Col, Row, Button } from 'react-bootstrap';\r\nimport { ChartSlot } from '../../chartsDisplay/singleChartDisplay'\r\nimport { AppContext } from \"../../../App\"\r\nimport { ModalChartDisplay } from \"../../chartsDisplay/modalChartDisplay\"\r\nimport TableDisplay from \"./tableDisplay\"\r\nimport ButtonsComponent from \"./buttonsComp\"\r\nimport { usePromiseTracker } from 'react-promise-tracker';\r\nimport Loader from 'react-promise-loader';\r\nimport SquareStatDisplay from '../../statsDisplays/squareStatDisplay'\r\nimport Notification from '../../notification'\r\n\r\nexport const Questions = () => {\r\n    const { promiseInProgress } = usePromiseTracker()\r\n    function handleImagePassing(count) {\r\n        try {\r\n            return require(\"../../../images/clusterImg\" + count + \".png\").default\r\n        } catch (error) {\r\n            console.log(\"Image Error\")\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            {\r\n                (promiseInProgress === true) ?\r\n                    <div>\r\n                        {/* <span className=\"align-middle align-items-center h-90vh\">Loading...</span> */}\r\n                        <Loader promiseTracker={usePromiseTracker} />\r\n                    </div>\r\n                    :\r\n                    <AppContext.Consumer>\r\n                        {context => (\r\n                            <div className=\"mx-4 overflow-auto\">\r\n                                <Notification text={context.errorMessage} show={context.error} />\r\n                                <div className=\"outerBorders rowNoMargin topOuterBorder\">\r\n                                    <Col>\r\n\r\n                                    </Col>\r\n                                    <Col xs={3}>\r\n                                        <ChartSlot\r\n                                            iteration={context.iterationCount}\r\n                                            // imgSrc={\"../../images/clusterImg\" + context.iterationCount + \".png\"}>\r\n                                            imgSrc={handleImagePassing(context.iterationCount)}>\r\n                                        </ChartSlot>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Row>\r\n\r\n                                            <Col>\r\n                                            </Col>\r\n                                            <Col className=\"text-center\">\r\n                                                Options\r\n                                                <Row>\r\n                                                    <Col>\r\n                                                        <Link className=\"fixLinkOverButtonHover\" to=\"/summary\"><Button className=\"btn-block mb-3 mt-2\" variant=\"danger\">Finish</Button></Link>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                                <Row>\r\n                                                    <Col>\r\n                                                        <ModalChartDisplay></ModalChartDisplay>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row>\r\n                                        </Row>\r\n                                        <Row>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </div>\r\n                                <div className=\"rowNoMargin\">\r\n                                    <Col className=\"outerBorders marginLeft0 lign-middle align-items-center\">\r\n                                        <TableDisplay dataArr={context.dataArr} set={context.output.question_set}></TableDisplay>\r\n                                    </Col>\r\n                                    <Col className=\"\">\r\n                                        <Row className=\"outerBordersNoneRight\">\r\n                                            <ButtonsComponent set={context.output.question_set} python={context.trackPython} totalQuestion={context.formInput.questionsPerIteration} totalPercent={context.stats.constrainedPercent} pythonPass={context.pythonPass}></ButtonsComponent>\r\n                                        </Row>\r\n                                        <Row className=\"outerBordersNoneRight\">\r\n                                            <SquareStatDisplay stats={context.stats}></SquareStatDisplay>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </div>\r\n                            </div>\r\n\r\n                        )}\r\n                    </AppContext.Consumer>\r\n            }\r\n        </>\r\n    );\r\n}","import React, { Component } from 'react';\r\nimport { Col, Row, ProgressBar, Button } from 'react-bootstrap';\r\nimport { StatNumber } from \"./individualStatNumber\"\r\nimport * as JSZip from 'jszip';\r\nimport * as JSZipUtils from 'jszip-utils'\r\nimport { saveAs } from 'file-saver';\r\n\r\nclass RecStatDisplay extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.iterationCount = props.iterationCount\r\n        this.state = {\r\n            stats: props.stats\r\n        }\r\n    }\r\n\r\n    zipImagesFolderAndDownload = () => {\r\n        var zip = new JSZip();\r\n        var imageArr = []\r\n        for (let index = 0; index < this.iterationCount; index++) {\r\n            imageArr.push(require(\"../../images/clusterImg\" + (index + 1) + \".png\").default)\r\n        }\r\n        Promise.all(imageArr.map(function (url) {\r\n            return new Promise(function (resolve, reject) {\r\n                JSZipUtils.getBinaryContent(url, function (err, data) {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        console.log(url)\r\n                        zip.file(url.split(\"/\")[3], data);\r\n                        resolve();\r\n                    }\r\n                });\r\n            })\r\n        })).then(function () {\r\n            zip.generateAsync({\r\n                type: \"blob\"\r\n            }).then(function (content) {\r\n                saveAs(content, \"images.zip\")\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"containerNoPadding\">\r\n                    <Row>\r\n                        <Col className=\"text-center\">\r\n                            Constrained Percentage\r\n                            <Row>\r\n                                <Col>\r\n                                    <Row>\r\n                                        <Col className=\"my-3\">\r\n                                            <ProgressBar striped animated variant=\"primary\" label={`${this.state.stats.constrainedPercent}%`} now={this.state.stats.constrainedPercent} />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row className=\"\">\r\n                                        <Col xs={4}>\r\n                                            <Row>\r\n                                                <Col>\r\n                                                    <span>{this.state.stats.maxConstraint}%</span>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row>\r\n                                                <Col>\r\n                                                    <span className=\"individTitleForStats\">Max Constraint Percent</span>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Col>\r\n                                        <Col xs={4}>\r\n                                            <Row>\r\n                                                <Col>\r\n                                                    <span>{this.state.stats.totalConstraints}/{this.state.stats.possibleConstraints}</span>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row>\r\n                                                <Col>\r\n                                                    <span className=\"individTitleForStats\">Total Constraints Possible</span>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Col>\r\n                                        <Col xs={4}>\r\n                                            <Row>\r\n                                                <Col>\r\n                                                    <span>{this.state.stats.constraintsLeft}</span>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row>\r\n                                                <Col>\r\n                                                    <span className=\"individTitleForStats\">Constraints Left</span>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        <Col className=\"text-center\">\r\n                            Constraints\r\n                            <Row className=\"lineForStats mt-1\">\r\n                                <Col xs={4}>\r\n                                    <StatNumber number={this.state.stats.mlConstraintCount} name=\"Must Link Constraints\"></StatNumber>\r\n                                </Col>\r\n                                <Col xs={4}>\r\n                                    <StatNumber number={this.state.stats.unknownConstraintCount} name=\"Unknown Constraints\"></StatNumber>\r\n                                </Col>\r\n                                <Col xs={4}>\r\n                                    <StatNumber number={this.state.stats.clConstraintCount} name=\"Can't Link Constraints\"></StatNumber>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        <Col className=\"text-center\">\r\n                            Silhouette\r\n                            <Row className=\"mt-1\">\r\n                                <Col xs={4}>\r\n                                    <StatNumber number={this.state.stats.silMin} name=\"Silhouette Minimum\"></StatNumber>\r\n                                </Col>\r\n                                <Col xs={4}>\r\n                                    <StatNumber number={this.state.stats.silAvg} name=\"Silhouette Average\"></StatNumber>\r\n                                </Col>\r\n                                <Col xs={4}>\r\n                                    <StatNumber number={this.state.stats.silMax} name=\"Silhouette Maximum\"></StatNumber>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        <Col xs={2} className=\"text-center\">\r\n                            Options\r\n                            <Row>\r\n                                <Col>\r\n                                    <a className=\"fixLinkOverButtonHover\" href={require(\"../../model/finalized_model.sav\").default} download=\"model.sav\">\r\n                                        <Button className=\"btn-block mb-3 mt-2\">\r\n                                            Export Model\r\n                                        </Button>\r\n                                    </a>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <Button className=\"btn-block mb-3 mt-2\" onClick={this.zipImagesFolderAndDownload}>\r\n                                        Download Images\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default RecStatDisplay;","import React, { Component } from 'react';\r\nimport ChartsDisplay from \"../../chartsDisplay/chartsDisplay\"\r\nimport { AppContext } from \"../../../App\"\r\nimport { Col } from 'react-bootstrap';\r\nimport RecStatDisplay from \"../../statsDisplays/recStatDisplay\"\r\n\r\nclass Summary extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <AppContext.Consumer>\r\n                    {context => {\r\n                        return (\r\n                            <div className=\"overflow-auto\">\r\n                                <div className=\"outerBorders rowNoMargin mx-4 mt-3\">\r\n                                    <RecStatDisplay stats={context.stats} iterationCount={context.iterationCount}></RecStatDisplay>\r\n                                </div>\r\n                                <div className=\"rowNoMargin\">\r\n                                    <Col className=\"noXPadding\">\r\n                                        <ChartsDisplay iterationCount={context.iterationCount}></ChartsDisplay>\r\n                                    </Col>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }}\r\n                </AppContext.Consumer>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Summary;","import React from \"react\";\r\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport Landing from \"./pages/landingPage/landing\"\r\nimport { Questions } from \"./pages/questions/questions\"\r\nimport Summary from \"./pages/summary/summary\"\r\nimport { AppContext } from \"../App\"\r\n\r\nexport default function Router() {\r\n    let handleRedirect = (c) => {\r\n        c.pythonRestart()\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n\r\n    return (\r\n        <AppContext.Consumer>\r\n            {context => (\r\n                <BrowserRouter>\r\n                    <div>\r\n                        <Switch>\r\n                            <Route exact path=\"/\" render={() => <Landing />} />\r\n                            <Route exact path=\"/questions\"\r\n                                render={() => {\r\n                                    return (\r\n                                        context.inputVerified ?\r\n                                            <Questions /> :\r\n                                            handleRedirect(context)\r\n                                    )\r\n                                }}\r\n                            />\r\n                            <Route exact path=\"/summary\"\r\n                                render={() => {\r\n                                    return (\r\n                                        context.inputVerified ?\r\n                                            <Summary /> :\r\n                                            <Redirect to=\"/\" />\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Switch>\r\n                    </div>\r\n                </BrowserRouter>\r\n            )}\r\n        </AppContext.Consumer>\r\n    );\r\n}","import './App.css';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Router from './components/router'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { trackPromise } from 'react-promise-tracker';\r\nimport { Stats, PythonOutput } from './Python'\r\n\r\nexport const AppContext = React.createContext({\r\n  dataArr: null,\r\n  iterationCount: null,\r\n  formInput: null,\r\n  inputVerified: null,\r\n  pythonPass: null,\r\n  error: null,\r\n  errorMessage: \"\",\r\n  output: PythonOutput,\r\n  stats: Stats,\r\n  saveData: () => { },\r\n  trackPython: () => { },\r\n  saveForm: () => { },\r\n  verifiedInput: () => { },\r\n  pythonRestart: () => { }\r\n});\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      dataArr: null,\r\n      iterationCount: 0, //default = 0\r\n      formInput: null,\r\n      inputVerified: false,\r\n      pythonPass: true,\r\n      error: false,\r\n      errorMessage: \"\",\r\n      output: \"\",\r\n      stats: \"\",\r\n      saveData: this.saveData,\r\n      trackPython: this.trackPython,\r\n      saveForm: this.saveForm,\r\n      verifiedInput: this.verifiedInput,\r\n      pythonRestart: this.pythonRestart\r\n    };\r\n  }\r\n\r\n  trackPython = (ml, cl, unknown) => {\r\n    trackPromise(\r\n      this.runPython(ml, cl, unknown)\r\n    )\r\n  }\r\n\r\n  runPython = (ml, cl, unknown) => {\r\n    const promise = new Promise((resolve) => {\r\n      const formData = new FormData();\r\n      var baseUrl;\r\n      if (window.location.origin === \"http://localhost:3000\") {\r\n        baseUrl = \"http://localhost:4500\"\r\n      } else {\r\n        baseUrl = window.location.origin\r\n      }\r\n      console.log(baseUrl)\r\n      formData.append('filename', this.state.formInput.filename)\r\n      formData.append('interation_num', this.state.iterationCount + 1);\r\n      this.setState({ iterationCount: this.state.iterationCount + 1 })\r\n      formData.append('question_num', this.state.formInput.questionsPerIteration)\r\n      formData.append('cluster_num', this.state.formInput.numberOfClusters)\r\n      let totalML = this.state.formInput.ml.concat(ml)\r\n      let totalCL = this.state.formInput.cl.concat(cl)\r\n      let unknownC = this.state.formInput.unknown.concat(unknown)\r\n      formData.append('ml', totalML)\r\n      formData.append('cl', totalCL)\r\n      formData.append('unknown', unknownC)\r\n      this.setState({\r\n        formInput: {\r\n          ...this.state.formInput,\r\n          ml: totalML,\r\n          cl: totalCL,\r\n          unknown: unknownC\r\n        }\r\n      });\r\n      let outputsFromPython\r\n      resolve(\r\n        axios.post(baseUrl + '/python', formData, {\r\n        }).then(res => {\r\n          outputsFromPython = res.data.name\r\n          var formState = this.state.formInput\r\n          var outputArr = outputsFromPython.split(\"SEPERATOR\")\r\n          //The if catches any errors that Python may return. \r\n          if (parseInt(outputsFromPython) === 2) {\r\n            this.handleMissingDataErrors(\"There was a constraint conflict. The tool can no longer improve.\")\r\n          } else if (parseInt(outputArr[3]) === 3) {\r\n            this.handleMissingDataErrors(\"Due to the chosen constraints, the tool was unable to find \" + this.state.formInput.questionsPerIteration + \" questions. The tool can no longer improve.\")\r\n          } else {\r\n            //Passed all the errors, continue on with the process. \r\n            this.setState({ stats: new Stats(formState.cl.length, formState.ml.length, formState.unknown.length, formState.maxConstraintPercent, this.state.dataArr.data.length, outputArr[1], outputArr[2], outputArr[0]) })\r\n            this.setState({ output: new PythonOutput(outputArr[3].trim()) })\r\n            this.errorFalse() //Remove any errors that may have been created previously. \r\n          }\r\n        }).catch(_ => {\r\n          if (parseInt(outputsFromPython) === 1) {\r\n            this.setState({ inputVerified: false })\r\n            this.setState({ errorMessage: \"The dataset that was uploaded had categorical information. The tool can only handle numbers at this time.\" })\r\n          }\r\n        })\r\n      )\r\n    });\r\n    return promise;\r\n  }\r\n\r\n  handleMissingDataErrors = (message) => {\r\n    this.setState({ iterationCount: this.state.iterationCount - 1 })\r\n    this.setState({ pythonPass: false })\r\n    this.setState({ error: true })\r\n    this.setState({ errorMessage: message })\r\n  }\r\n\r\n  saveData = (e) => {\r\n    this.setState({ dataArr: e })\r\n  }\r\n\r\n  verifiedInput = () => {\r\n    this.setState({ inputVerified: true })\r\n  }\r\n\r\n  pythonRestart = () => {\r\n    this.setState({ iterationCount: 0 })\r\n    this.setState({ error: true })\r\n    this.setState({ pythonPass: true })\r\n  }\r\n\r\n  errorFalse = () => {\r\n    this.setState({ error: false })\r\n  }\r\n\r\n  saveForm = (e) => {\r\n    this.setState({ formInput: e })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <AppContext.Provider value={this.state}>\r\n          <Router></Router>\r\n        </AppContext.Provider>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","var map = {\n\t\"./clusterImg1.png\": 153,\n\t\"./clusterImg2.png\": 154,\n\t\"./clusterImg3.png\": 155,\n\t\"./clusterImg4.png\": 156,\n\t\"./clusterImg5.png\": 157,\n\t\"./clusterImg6.png\": 158,\n\t\"./clusterImg7.png\": 159\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 95;"],"sourceRoot":""}